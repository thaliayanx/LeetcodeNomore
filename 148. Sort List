148. Sort List
Sort a linked list in O(n log n) time using constant space complexity.

解答：

解题报告：就是对一个链表进行归并排序。
主要考察3个知识点，
知识点1：归并排序的整体思想
知识点2：找到一个链表的中间节点的方法
知识点3：合并两个已排好序的链表为一个新的有序链表

归并排序的基本思想是：找到链表的middle节点，然后递归对前半部分和后半部分分别进行归并排序，最后对两个以排好序的链表进行Merge。

代码：

寻找中间节点（用快慢指针）：

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode middle=getMiddle(head);
        ListNode next=middle.next;
        middle.next=null;
        return mergeTwo(sortList(head),sortList(next));
    }
    public ListNode getMiddle(ListNode head){
        ListNode fst=head;
        ListNode slw=head;
        while(fst.next!=null && fst.next.next!=null){
            fst=fst.next.next;
            slw=slw.next;
        }
        return slw;
    }
    public ListNode mergeTwo(ListNode h1, ListNode h2){
        ListNode dummyHead=new ListNode(-1);
        ListNode curr=dummyHead;
        while(h1!=null && h2!=null){
            if(h1.val<=h2.val){
                curr.next=h1;
                h1=h1.next;
            }
            else{
                curr.next=h2;
                h2=h2.next;
            }
            curr=curr.next;
        }
        curr.next=h1==null? h2:h1;
        return dummyHead.next;
    }
}