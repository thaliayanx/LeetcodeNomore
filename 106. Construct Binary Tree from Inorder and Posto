 106. Construct Binary Tree from Inorder and Postorder Traversal
Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

二分法
复杂度
时间 O(N^2) 空间 O(N)

思路
中序序列仍然是以根节点划分为左右两边，而后序序列的特点则是根在最后，然后在跟前面的那部分中，前面部分是左子树，后面的部分是右子树。所以其实我们就是把上一题给反过来了。这题我们将后序序列的指针全局化，这样我们可以先建好右子树，再建左子树，而指针只要顺序从后向前就行了。

public class Solution {
    
    int postEnd = 0;
    
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        postEnd = postorder.length - 1;
        return helper(postorder, inorder, 0, inorder.length - 1);
    }
    
    private TreeNode helper(int[] postorder, int[] inorder, int inStart, int inEnd){
        if(postEnd < 0 || inStart > inEnd){
            return null;
        }
        TreeNode root = new TreeNode(postorder[postEnd--]);
        int inMid = 0;
        // 找到中序序列的根节点
        for(int i = inStart; i <= inEnd; i++){
            if(inorder[i] == root.val){
                inMid = i;
                break;
            }
        }
        // 建好右子树
        root.right = helper(postorder, inorder, inMid + 1, inEnd);
        // 建好左子树
        root.left = helper(postorder, inorder, inStart, inMid - 1);
        return root;
    }
}