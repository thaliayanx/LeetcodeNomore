78. Subsets
Given a set of distinct integers, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
深度优先搜索
复杂度
时间 O(NlogN) 空间 O(N) 递归栈空间

思路
这道题可以转化为一个类似二叉树的深度优先搜索。二叉树的根是个空集，它的左子节点是加上第一个元素产生的集合，右子节点不加上第一个元素所产生的集合。以此类推，左子节点的左子节点是加上第二个元素，左子节点的右子节点是不加上第二个元素。而解就是这个二叉树所有的路径，我们要做的就是根据加，或者不加下一元素，来产生一个新的集合，然后继续递归直到终点。另外需要先排序以满足题目要求。

注意
这里要先排序，不然过不了leetcode，但实际上是不用的
如果递归之前先将空集加入结果，那么递归尽头就不需要再加一次空集。反之则需要。
LinkedList在这里效率要高于ArrayList。
新的集合要new一个新的list，防止修改引用。

public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
    	List<List<Integer>> res=new LinkedList<List<Integer>>();
    	List<Integer> tmp=new LinkedList<Integer>();
       //先加入空集
    	res.add(tmp);
    	dfs(nums, res, tmp, 0);
    	return res;
    }
    publice void dfs(int[] nums, List<List<Integer>> res,List<Integer> tmp, int index){
    	if(index>=nums.length){
    		return;
    	}
      // 不加入当前元素产生的集合，然后继续递归
    	dfs(nums, res, tmp, index+1);
    	List<Integer> tmp2=new LinkedList<Integer>(tmp);
    	tmp2.add(nums[index]);
    	res.add(tmp2);
      // 加入当前元素产生的集合，然后继续递归
    	dfs(nums, res, tmp2, index+1);
    }
}