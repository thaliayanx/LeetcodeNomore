101. Symmetric Tree
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.

递归法
复杂度
时间 O(N) 空间 O(h) 递归栈空间

思路
其实和Same Tree写法是一样的，Same Tree是比较两个节点的两个左边，然后再比较两个节点的两个右边。而对称树是要判断左节点的左节点和右节点的右节点相同（外侧），左节点的右节点和右节点的左节点相同（内侧）。不过对称树是判断一棵树，我们要用Same Tree一样的写法，就要另写一个可以比较两个节点的函数。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        return root==null? true : check(root.left, root.right);
    }
    public boolean check(TreeNode left, TreeNode right){
        if(left==null && right ==null){
            return true;
        }
        if(left==null || right ==null || left.val!=right.val){
            return false;
        }
        return check(left.left, right.right) && check(left.right, right.left);
    }
}

迭代法
复杂度
时间 O(N) 空间 O(h)

思路
因为该题本质就是二叉树遍历，所以我们也可以用迭代来解。这里用一个队列，两棵树按照对称的顺序加入节点，然后进行比较。

public class Solution {
    public boolean isSymmetric(TreeNode root) {
    	if(root==null) return true;
    	Queue<TreeNode> q1=new LinkedList<TreeNode>();
    	Queue<TreeNode> q2=new LinkedList<TreeNode>();
    	q1.offer(root.left);
    	q2.offer(root.right);
    	while(!q1.isEmpty() && !q2.isEmpty()){
    		TreeNode n1=q1.poll();
    		TreeNode n2=q2.poll();
    		if(n1==null && n2==null){
    			continue;
    		}
    		if(n1==null || n2==null|| n1.val!=n2.val){
    			return false;
    		}
    		q1.offer(n1.left);
    		q2.offer(n2.right);
    		q1.offer(n1.right);
    		q2.offer(n2.left);
    	}
    	return q1.isEmpty() && q2.isEmpty();
    }
}