150. Evaluate Reverse Polish Notation
Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6

  栈法
复杂度
时间 O(N) 空间 O(N)

思路
逆波兰表达式的计算十分方便，对于运算符，其运算的两个数就是这个运算符前面的两个数。所以我们只要用一个栈，每次遇到数字就压入栈内，每次遇到运算符就弹出两个数，计算后再压回栈内，最后栈内剩下的那个数就是计算结果了。

注意
对于减法，先弹出的是减号后面的数。对于除法，先弹出的是除号后面的数。

public class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> s=new Stack<Integer>();
        for(String token: tokens){
            switch(token){
                case "+":
                    s.push(s.pop()+s.pop());
                    break;
                case "-":
                    s.push(-s.pop()+s.pop());
                    break;
                case "*":
                    s.push(s.pop()*s.pop());
                    break;
                case "/":
                    int n1=s.pop();
                    int n2=s.pop();
                    s.push(n2/n1);
                    break;
                default:
                    s.push(Integer.parseInt(token));
            }
                
        }
        return s.pop();
    }
}