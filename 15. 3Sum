15. 3Sum
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
Time complexity: O(n^2)
Use two pointers to iterate through the array from front and back.

public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
    	List<List<Integer>> res=new LinkedList<List<Integer>>();
    	if(nums.length<3) return res;
    	Arrays.sort(nums);

    	for(int i=0;i<nums.length-2;i++){
    		if(i!=0 && nums[i]==nums[i-1]){
    			continue;
    		}
    		int negate=-nums[i];
    		int left=i+1;
    		int right=nums.length-1;
    		while(left<right){
    			if(nums[left]+nums[right]==negate){
    				List<Integer> tmp=new LinkedList<Integer>();
    				tmp.add(nums[i]);
    				tmp.add(nums[left]);
    				tmp.add(nums[right]);
    				res.add(tmp);
    				left++;
    				right--;
	    			
	    			while(left<right && nums[left]==nums[left-1]){
	    				left++;
	    			}
	    			while(left<right && nums[right]==nums[right+1]){
	    				right--;
	    			}
    			}
    			else if(nums[left]+nums[right]<negate){
    				left++;
    			}
    			else{
    				right--;
    			}
    		}
    	}
    	return res;
    }
}