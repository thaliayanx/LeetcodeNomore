153. Find Minimum in Rotated Sorted Array
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

You may assume no duplicate exists in the array.

二分递归法
复杂度
时间 O(N) 空间 O(N) 递归栈空间

思路
递归法实现起来更加简洁清晰。当min等于max时，我们锁定了那个最小值。那如何判断在哪一半呢，如果num[max] > num[mid]，说明右边都是有序的，所以那个旋转点必在左半边，也就是min到mid之间，如果num[max] < num[mid]，说明右边有问题，不过mid点本身肯定不是最小值，他已经大于num[max]了，所以在mid+1和max之间

注意
min == max时随便返回一个

代码
public class Solution {
    public int findMin(int[] num) {
        return findMin(num, 0, num.length-1);
    }
    private int findMin(int[] num, int min, int max){
        if(min == max){
            return num[min];
        }
        int mid = (min+max)/2;
        if(num[max] > num[mid]){
            return findMin(num, min, mid);
        } else {
            return findMin(num, mid+1, max);
        }
    }
}
