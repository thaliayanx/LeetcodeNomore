53. Maximum Subarray

Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

click to show more practice.

More practice:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

这道题有两种经典解法，一个是：Kadane算法，算法复杂度O(n)；另外一个是分治法 Divide and Conquer：算法复杂度为O(nlogn)。

Here is the Kadane algorithm 

Initialize:
    max_so_far = 0
    max_ending_here = 0

Loop for each element of the array
  (a) max_ending_here = max_ending_here + a[i]
  (b) if(max_ending_here < 0)
            max_ending_here = 0
  (c) if(max_so_far < max_ending_here)
            max_so_far = max_ending_here
return max_so_far

public class Solution {
    public int maxSubArray(int[] nums) {
        int max=nums[0];
        int maxEndHere=0;
        for(int i=0; i<nums.length;i++){
            maxEndHere=Math.max(nums[i],maxEndHere+nums[i]);
            max=Math.max(maxEndHere,max);
        }
        return max;
    }
}


Divide and Conquer:

public class Solution {
    public int maxSubArray(int[] nums) {
        return divide(nums,0,nums.length-1);
    }
    public int divide(int[] nums, int low, int high){
        if(low==high){
            return nums[low];
        }
        if(low==high-1){
            return Math.max(nums[low]+nums[high], Math.max(nums[low], nums[high]));
        }

        int mid=(low+high)/2;
        int lmax=divide(nums, 0,mid);
        int hmax=divide(nums,mid,high);
        int mmax=nums[mid];
        int tmp=mmax;
        for(int i=mid-1;i>=low;i--){
            tmp+=nums[i];
            if(tmp>mmax){
                mmax=tmp;
            }
        }

        int tmp=mmax;
        for(int i=mid+1;i<=low;i++){
            tmp+=nums[i];
            if(tmp>mmax){
                mmax=tmp;
            }
        }
        return Math.max(mmax, Math.max(lman, hmax));
    }
}


















