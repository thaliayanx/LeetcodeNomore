56. Merge Intervals

Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].

题解：

这道题主要难点是改写Comparator。 

 Comparator接口定义了两个方法：compare（ ）和equals（ ）。这里给出的compare（ ）方法按顺序比较了两个元素：
　　
　　int compare(Object obj1, Object obj2)
　　
　 　obj1和obj2是被比较的两个对象。当两个对象相等时，该方法返回0；当obj1大于obj2时，返回一个正值；否则，返回一个负值。如果用于比较 的对象的类型不兼容的话，该方法引发一个ClassCastException异常。通过覆盖compare（ ），可以改变对象排序的方式。例如，通过创建一个颠倒比较输出的比较函数，可以实现按逆向排序。
　　
　　这里给出的equals( )方法，测试一个对象是否与调用比较函数相等：
　　
　　boolean equals(Object obj)
　　
　　obj是被用来进行相等测试的对象。如果obj和调用对象都是Comparator的对象并且使用相同的排序。该方法返回true.否则返回false.重载equals（ ）方法是没有必要的，大多数简单的比较函数都不这样做。

 /**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
    	if(intervals==null|| intervals.size()<=1){
    		return intervals;
    	}
    	Collections.sort(intervals, new IntervalComparator());
    	List<Interval> res=new ArrayList<Interval>();
    	Interval pre=intervals.get(0);
    	for(int i=0; i<intervals.size(); i++){
    		Interval curr=intervals.get(i);
    		if(pre.end>=curr.start){
    			Interval merged= new Interval(pre.start, Math.max(pre.end, curr.end));
    			pre=merged;
    		}
    		else{
    			res.add(pre);
    			pre=curr;
    		}
    	}
    	res.add(pre);
    	return res;
    }
    class IntervalComparator implements Comparator<Interval>{
    	public int Compare(Interval i, Interval j){
    		return i.start-j.start;
    	}
    }



｝