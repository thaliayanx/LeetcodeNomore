156	Binary Tree Upside Down 
Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.

For example:
Given a binary tree {1,2,3,4,5},
1
/ \
2 3
/ \
4 5

return the root of the binary tree [4,5,2,#,#,3,1].
4
/ \
5 2
  / \
 3 1

Time Complexity - O(n)， Space Complexity - O(logn)

 这题有一个重要的限制就是，整个数的任何一个右孩子都不会再生枝节，基本就是一个梳子的形状。对于树类型的题目，首先可以想到一种递归的思路：把左子树继续颠倒，颠倒完后，原来的那个左孩子的左右孩子指针分别指向原来的根节点以及原来的右兄弟节点即可。
 Recursion:

 public TreeNode UpsideDownBinaryTree(TreeNode root) {  
 	if(root==null) return null;
 	TreeNode parent=root, left=root.left, right=root.right;
 	if(left!=null){
 		TreeNode tmp=upsideDownBinaryTree(left);
 		left.left=right;
 		left.right=parent;
 		return tmp
 	}
 	return root;
 ｝

 第二个思路是直接用迭代代替递归，做起来也不麻烦，并且效率会更高，因为省去了递归所用的栈空间。
Iterator:

public TreeNode UpsideDownBinaryTree(TreeNode root) {  
 	TreeNode node=root, parent=null, right=null;
 	while(node!=null){
 		Treenode left=node.left;
 		node.left=right;
 		right=node.right;	
 		node.right=parent;
 		parent=node;
 		node=node.left;
 	}
 	return parent;
 ｝
