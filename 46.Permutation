46.Permutation
Given a collection of numbers, return all possible permutations.

For example, [1,2,3] have the following permutations: [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

Swap method,but only swap with the integer right behind
时间 O(N^2) 空间 O(N) 递归栈



public class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> permute(int[] nums) {
        result=new LinkedList<List<Integer>>();
        helper(nums,0);
        return result;
    }
    public void helper(int[] nums, int i){
    // 找到转置完成后的解，将其存入列表中
        if(i==nums.length-1){
            List<Integer> tmp=new LinkedList<Integer>();
            for(int j=0;j<nums.length;j++){
                tmp.add(nums[j]);
            }
            result.add(tmp);
        }
        // 将当前位置的数跟后面的数交换，并搜索解
        for(int j=i;j<nums.length;j++){
            swap(nums,i,j);
            helper(nums,i+1);
            swap(nums,i,j);
        }
    }
    public void swap(int[] nums, int i, int j){
        int tmp=nums[i];
        nums[i]=nums[j];
        nums[j]=tmp;
    }
}

For every search, choose an integer to add to the list, use an array of bools to mark the integer which has already been added. Only add this list to the result when its length is the same as the nums.length.
时间 O(N) 空间 O(N) 递归栈




public class Solution {
    List<List<Integer>> result;
    boolean[] used;
    public List<List<Integer>> permute(int[] nums) {
        result= new LinkedList<List<Integer>>();
        used= new boolean[nums.length];
        List<Integer> tmp=new LinkedList<Integer>();
        helper(nums, tmp);
        return result;
    }
    public helper(int nums[], LinkedList<Integer> tmp){
        if(tmp.size()==nums.length){
            LinkedList<Integer> list=new LinkedList<Integer>(tmp);
            result.add(list);
        }
        else{
            for(int i=0;i<nums.length;i++){
                if(used[i]){
                    continue;
                }
                used[i]=true;
                tmp.add(nums[i]);
                helper(nums,tmp);
                tmp.remove(tmp.size()-1);
                used[i]=false;
            }
        }
    }






}