241. Different Ways to Add Parentheses
Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.


Example 1
Input: "2-1-1".

((2-1)-1) = 0
(2-(1-1)) = 2
Output: [0, 2]


Example 2
Input: "2*3-4*5"

(2*(3-(4*5))) = -34
((2*3)-(4*5)) = -14
((2*(3-4))*5) = -10
(2*((3-4)*5)) = -10
(((2*3)-4)*5) = 10
Output: [-34, -14, -10, -10, 10]

分治法
复杂度
O(Catalan(N)) 时间 O(N) 空间
N为operator数目
时间复杂度是卡特兰数，即O((2n)! / n!(n-1)!)
空间复杂度是O(N)，为递归时系统栈空间的消耗

思路
心路历程：

这题卡住了，明显是递归，但是递归的接口不容易弄好，主要是返回值不好确定：
最开始试过public int helper(start, end)，然而这个返回值int不明确，因为start到end会有多个表达式值，一个int不好使，遂作罢
然后试了public void helper(start, end, resultList),这个是想traverse，仔细一想也是不行，遂作罢
遂看别人题解，发现网上所有的题解惊人的相似，他们的递归接口就是leetcode给的接口，并没有自己再写：
List<Integer> helper(String input),这个接口很好地解决了我第一个尝试的问题，一个Int不好使，就搞个list of int，所以这个接口的意思是：
输入为string，返回这个string的不同组合后的表达式值，返回在List里。而且他没有用start和end，那就是要用substring了，无伤大雅。

解题思路是：
对于当前表达式，对每一个操作符，将其左边的表达式组合一下搞一个list出来，将其右边的表达式组合一下搞一个List出来，用当前操作符把两个List搞一下，返回一个新的list去，代表当前表达式的所有表达式组合可取值。

注意
返回的是List，不是int

代码
主程序(写在白板上)

public class Solution {
    public List<Integer> diffWaysToCompute(String input) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < input.length(); i++) {
            if (isOperator(input.charAt(i))) {
                char operator = input.charAt(i);
                List<Integer> left = diffWaysToCompute(input.substring(0, i));
                List<Integer> right = diffWaysToCompute(input.substring(i + 1));
                for (int num1 : left) {
                    for (int num2 : right) {
                        result.add(calculate(num1, num2, operator));
                    }
                }
            }
        }
        if (result.size() == 0) {
            result.add(Integer.valueOf(input));
        }
        return result;
    }
}
Utility(跟面试官说一下就行):

public int calculate(int num1, int num2, char operator) {
    int result = 0;
    switch(operator) {
        case '+' : result = num1 + num2;
        break;
         
        case '-' : result = num1 - num2;
        break;
         
        case '*' : result = num1 * num2;
        break;
    }
    return result;
}
public boolean isOperator(char c) {
    if (c == '+' || c == '-' || c == '*')
        return true;
    return false;
}